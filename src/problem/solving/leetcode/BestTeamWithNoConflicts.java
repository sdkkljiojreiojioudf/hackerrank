package problem.solving.leetcode;

import problem.solving.implementation.sixstars.MaximumPalindromes.Solution;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

public class BestTeamWithNoConflicts {

    private static class ScoreAge {
        private final int score;
        private final int age;

        public ScoreAge(int score, int age) {
            this.score = score;
            this.age = age;
        }
    }

    // Iterative function to find the maximum sum of an increasing subsequence
    public static int MSIS(int[] nums)
    {
        // base case
        if (nums.length == 0) {
            return 0;
        }
        // array to store subproblem solutions. `sum[i]` stores the maximum
        // sum of the increasing subsequence that ends with `nums[i]`
        int[] sum = new int[nums.length];

        // base case
        sum[0] = nums[0];

        // start from the second array element
        for (int i = 1; i < nums.length; i++)
        {
            // do for each element in subarray `nums[0â€¦i-1]`
            for (int j = 0; j < i; j++)
            {
                // find increasing subsequence with max sum that ends with `nums[j]`,
                // where `nums[j]` is less than the current element `nums[i]`
                if (sum[i] < sum[j] && nums[i] >= nums[j]) {
                    sum[i] = sum[j];
                }
            }
            // include `nums[i]` in MSIS
            sum[i] += nums[i];
        }

        // find increasing subsequence with the maximum sum
        return Arrays.stream(sum).max().getAsInt();
    }

    public static int bestTeamScore(int[] scores, int[] ages) {
        List<ScoreAge> scoreAges = new ArrayList<>();
        for (int i = 0; i < scores.length; i++) {
            scoreAges.add(
                    new ScoreAge(
                            scores[i],
                            ages[i]
                    )
            );
        }
        List<Integer> scoreListSortedByAge = scoreAges.stream()
                .sorted(Comparator.comparingInt(o -> ((ScoreAge) o).age).thenComparingInt(o -> ((ScoreAge) o).score))
                .map(e -> e.score)
                .collect(Collectors.toList());

        int sum = MSIS(scoreListSortedByAge.stream().mapToInt(e -> e).toArray());

        return sum;
    }

    public static void main(String[] args) throws IOException {
        int result;


        //[2,8,9]
        //[5,2,5]
//        result = bestTeamScore(new int[]{2,8,9}, new int[]{5,2,5});
        //
//[1,3,5,10,15]
//[1,2,3,4,5]
//        result = bestTeamScore(new int[]{4,5,6,5}, new int[]{2,1,2,1});
//        [1,3,5,10,15]
//          [1,2,3,4,5]
//        result = bestTeamScore(new int[]{1,13,5,15, 10}, new int[]{1,2,3,4,5});
//        [460962,679768,194112,104507,598231,980520,539742,477236,467959,677671,757443,61403,219037,995843,413322,15190,682605,916122,338468,772900,60784,312499,181182,873013,182786,296212,277429,308488,745546,9710,446698,13900,268940,184906,723155,868049,944569,118671,449742,959968,970255,352104,95346,688389,770280,891006,441616,852252,575449,18193,691008,764402,586801,602099,467419,446620,769491,832649,630478,959676,789013,135815,209126,984880,9620,483609,433850,543243,297184,836524,630203,503623,294215,424218,375438,106735,228428,11084,717668,976822,979681,867230,234572,487976,350549,768094,382219,210446,901990,378738,165761,101742,815272,109070,895958,742345,698364,698110,706156,826177,30127,117739,475463,61911,261041,707541,120724,901421,974374,141914,283905,841660,204441,765889,646366,281334,446028,214445,625315,266553,423878,756523,814239,866027,500637,4607,913055,210035,161418,896500,946282,260213,345622,903616,43870,903344,900177,578372,273987,932014,850853,340368,899052,687594,881664,680358,701226,42445,218896,308312,230767,521326,311330,632959,866435,200673,401088,177313,554791,234585,346069,237861,157360,920062,574114,50256,603268,740665,329953,843608,853174,847698,980877,64323,290000,141256]
//[506,228,174,221,791,465,93,292,855,42,169,117,163,816,200,945,884,174,143,42,612,503,217,74,648,840,87,562,329,213,536,871,807,136,936,914,846,182,675,624,673,526,683,982,75,129,637,976,690,53,396,199,367,275,766,221,147,34,929,724,278,588,678,908,311,765,379,574,609,546,566,80,738,180,748,585,632,679,951,531,247,317,953,358,278,942,808,46,364,49,939,784,879,556,627,118,285,73,492,120,370,834,478,930,794,971,941,319,654,672,188,357,131,538,225,869,656,298,360,99,275,652,640,432,586,814,840,591,375,12,342,469,268,88,517,167,625,853,865,304,272,657,894,62,388,710,746,146,850,842,487,790,103,159,925,758,475,594,973,894,974,312,459,767,331,839,467,352,967,167,409,345,723,401,27,107]
//        result = bestTeamScore(new int[]{460962, 679768, 194112, 104507, 598231, 980520, 539742, 477236, 467959, 677671, 757443, 61403, 219037, 995843, 413322, 15190, 682605, 916122, 338468, 772900, 60784, 312499, 181182, 873013, 182786, 296212, 277429, 308488, 745546, 9710, 446698, 13900, 268940, 184906, 723155, 868049, 944569, 118671, 449742, 959968, 970255, 352104, 95346, 688389, 770280, 891006, 441616, 852252, 575449, 18193, 691008, 764402, 586801, 602099, 467419, 446620, 769491, 832649, 630478, 959676, 789013, 135815, 209126, 984880, 9620, 483609, 433850, 543243, 297184, 836524, 630203, 503623, 294215, 424218, 375438, 106735, 228428, 11084, 717668, 976822, 979681, 867230, 234572, 487976, 350549, 768094, 382219, 210446, 901990, 378738, 165761, 101742, 815272, 109070, 895958, 742345, 698364, 698110, 706156, 826177, 30127, 117739, 475463, 61911, 261041, 707541, 120724, 901421, 974374, 141914, 283905, 841660, 204441, 765889, 646366, 281334, 446028, 214445, 625315, 266553, 423878, 756523, 814239, 866027, 500637, 4607, 913055, 210035, 161418, 896500, 946282, 260213, 345622, 903616, 43870, 903344, 900177, 578372, 273987, 932014, 850853, 340368, 899052, 687594, 881664, 680358, 701226, 42445, 218896, 308312, 230767, 521326, 311330, 632959, 866435, 200673, 401088, 177313, 554791, 234585, 346069, 237861, 157360, 920062, 574114, 50256, 603268, 740665, 329953, 843608, 853174, 847698, 980877, 64323, 290000, 141256},
//                new int[]{506, 228, 174, 221, 791, 465, 93, 292, 855, 42, 169, 117, 163, 816, 200, 945, 884, 174, 143, 42, 612, 503, 217, 74, 648, 840, 87, 562, 329, 213, 536, 871, 807, 136, 936, 914, 846, 182, 675, 624, 673, 526, 683, 982, 75, 129, 637, 976, 690, 53, 396, 199, 367, 275, 766, 221, 147, 34, 929, 724, 278, 588, 678, 908, 311, 765, 379, 574, 609, 546, 566, 80, 738, 180, 748, 585, 632, 679, 951, 531, 247, 317, 953, 358, 278, 942, 808, 46, 364, 49, 939, 784, 879, 556, 627, 118, 285, 73, 492, 120, 370, 834, 478, 930, 794, 971, 941, 319, 654, 672, 188, 357, 131, 538, 225, 869, 656, 298, 360, 99, 275, 652, 640, 432, 586, 814, 840, 591, 375, 12, 342, 469, 268, 88, 517, 167, 625, 853, 865, 304, 272, 657, 894, 62, 388, 710, 746, 146, 850, 842, 487, 790, 103, 159, 925, 758, 475, 594, 973, 894, 974, 312, 459, 767, 331, 839, 467, 352, 967, 167, 409, 345, 723, 401, 27, 107});
//        [6,5,1,7,6,5,5,4,10,4]   =>  4,5,5,6,6,7,10 ->
//        [3,2,5,3,2,1,4,4,5,1]
//        result = bestTeamScore(new int[]{6, 5, 1, 7, 6, 5, 5, 4, 10, 4}, new int[]{3, 2, 5, 3, 2, 1, 4, 4, 5, 1});

//[722,235,424,711,508,881,21,126,828,679,826,264,318,284,778,409,658,10,502,609,452,552,45,926,376,229,463]
//[10,95,26,25,16,58,90,84,47,17,31,54,7,10,63,25,65,16,31,57,24,13,81,36,1,25,6]
//        result = bestTeamScore(
//                new int[]{722, 235, 424, 711, 508, 881, 21, 126, 828, 679, 826, 264, 318, 284, 778, 409, 658, 10, 502, 609, 452, 552, 45, 926, 376, 229, 463},
//                new int[]{10, 95, 26, 25, 16, 58, 90, 84, 47, 17, 31, 54, 7, 10, 63, 25, 65, 16, 31, 57, 24, 13, 81, 36, 1, 25, 6});
//        result = bestTeamScore(new int[]{20, 20}, new int[]{18, 18});
//        result = bestTeamScore(new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, new int[]{811, 364, 124, 873, 790, 656, 581, 446, 885, 134});
//
//        //[1]
//        //[4]
//        result = bestTeamScore(new int[]{1}, new int[]{4});
////
//////        [1,3,7,3,2,4,10,7,5]   => 10,7,3,2,7
//////        [4,5,2,1,1,2,4, 1,4]   => 4, 1,1,1,1
//        result = bestTeamScore(new int[]{1, 3, 7, 3, 2, 4, 10, 7, 5}, new int[]{4, 5, 2, 1, 1, 2, 4, 1, 4});
//
//        //         [2,8,9]
////[5,2,5]
//        result = bestTeamScore(new int[]{1, 2, 3, 5}, new int[]{8, 9, 10, 1});
//        result = bestTeamScore(new int[]{2, 8, 9}, new int[]{5, 2, 5});
//
//        result = bestTeamScore(new int[]{4, 5, 6, 5}, new int[]{2, 1, 2, 1});
////        Input: scores = [1,2,3,5], ages = [8,9,10,1]
//
////        [6,5,1,7,6,5,5,4,10,4]
////[3,2,5,3,2,1,4,4,5,1]


        int[] scores = new int[10000];
        for (int i = 0; i < 10000; i++) {
            scores[i] = (int) (Math.random() * 1000000);
        }
        int[] ages = new int[100000];
        for (int i = 0; i < 100000; i++) {
            ages[i] = (int) (Math.random() * 100000);
        }
        result = bestTeamScore(scores, ages);
    }


}
